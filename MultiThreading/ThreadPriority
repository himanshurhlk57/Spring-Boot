package MultiThreading;

public class ThreadPriority {


    public static void main(String[] args) throws Exception {


        Thread threadOne = new Thread(() -> {
            for (int i = 0; i <= 5; i++) {
                System.out.println("Hello World " + Thread.currentThread().getPriority()); // way to print thread priority
                try {
                    Thread.sleep(1000);
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        }, "Hello Thread"); // way to give name to thread
        Thread threadTwo = new Thread(() -> {
            for (int i = 0; i <= 5; i++) {
                System.out.println("Hello World Again");
                try {
                    Thread.sleep(1000);
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        }, "Hello Again Thread");

        // by default it will print thread name as Thread-0, Thread-1
//        System.out.println(threadOne.getName()); // Thread-0
//        System.out.println(threadTwo.getName()); // Thread-1

        // we can set thread name
        // when you are working on a application that uses multiple thread, to know which thread is doing what
//        threadOne.setName("Hi Thread");
//        threadTwo.setName("Hello Thread");

        // in the thread object you can pass both runnable object or name

//        System.out.println(threadOne.getName());
//        System.out.println(threadTwo.getName());

        // set thread priority
        // by default if you create any thread it will have default priority
        // by default both have same priority i.e 5 whereas range lies from  (1 - 10) 1 -> least, 10 - highest, 5 - normal

        threadOne.setPriority(1);
//        or
        threadOne.setPriority(Thread.MIN_PRIORITY); // 1
//        threadTwo.setPriority(10);
        threadTwo.setPriority(Thread.MAX_PRIORITY); // 10
        System.out.println(threadOne.getPriority()); // 5
        System.out.println(threadTwo.getPriority()); // 5

        threadOne.start();
        try {
            Thread.sleep(200);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        threadTwo.start();


        threadOne.join();
        threadTwo.join();


        System.out.println("Exit");
    }
}

