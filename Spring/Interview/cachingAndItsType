in general, caching is a mechanism to store copies of data or files in such a manner so that they can be served quickly

If we are talking about database cache then caching will act as a buffered memory that remains between the application and the database. It stores recently demanded/inquired data in system memory to reduce the numbers of calls to the actual database.

Hibernate caching acts as a layer between the actual database and your application. It reduces the time taken to obtain the required data — as it fetches from memory instead of directly hitting the database. It is very useful when you need to fetch the same kind of data multiple times.

There are mainly two types of caching:
First level cache
Second-level cache

 i-> First level cache -> 
The First level cache is by default enabled by Hibernate itself.
The session object maintains the first-level cache.
Data of a particular session is not shared with other sessions of the application. So you can use the first-level cache to store local data i.e. required by the session itself.
when you query an entity or object, for the very first time it is retrieved from the database and stored into the first-level cache (associated with the hibernate session). If we query for the same entity or object again with the same session object, it will be loaded from cache and no SQL query will be executed

you can not disable the first-level cache, it is enabled by the hibernate itself. Hibernate entities or database rows remain in cache only until Session is open, once Session is closed, all associated cached data is removed.

Some useful methods:
Session.evict(): to remove the cached/stored entity.
refresh(): method to refresh the cache.
clear(): method to remove all the entities from the cache.

ii -> second level cache

The second-level cache is by default disabled, the developer needs to enable it explicitly, and the SessionFactory object is responsible to maintain it.

The second-level cache is accessible by the entire application means data hold by SessionFactory can be accessible to all the sessions

Let’s take an example: Suppose your application has 2 active sessions session1 and session2 respectively. Now, session1 has requested data having id=101 so that will be fetched from a database as it is the first call, and then it is stored into the second-level (SessionFactory) as well as in the first-level (session) cache also. Now, session2 requires the same data so it has also been queried with the same id=101. So this time session2 will get data from the SessionFactory, it will not going to hit the database.

Hibernate session is the hibernate’s first-level cache and SessionFactory is a second-level cache. So both (session/session-factory) are objects in a heap area. That means the cache is stored in the RAM only. And because of that, it gives faster access to data rather than databases.